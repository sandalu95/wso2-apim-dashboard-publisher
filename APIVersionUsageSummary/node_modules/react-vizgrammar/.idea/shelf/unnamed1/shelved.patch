Index: src/VizG.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport MapGenerator from './components/MapChart';\nimport TableCharts from './components/TableChart';\nimport NumberCharts from './components/NumberChart';\nimport InlineCharts from './components/InlineChart';\nimport VizGError from './VizGError';\nimport LineChart from './components/LineChart';\nimport AreaChart from './components/AreaChart';\nimport BarChart from './components/BarChart';\nimport ComposedChart from './components/ComposedChart';\nimport ArcCharts from './components/ArcCharts';\nimport ScatterPlot from './components/ScatterPlot';\n\nclass VizG extends Component {\n    /**\n     * Function will render a chart based on the given chart.\n     * @param {String} chartType Chart type of the chart.\n     * @param {Object} config Chart configuration provided by the user\n     * @param {Array} data Data provided by the user\n     * @param {Object} metadata Metadata related to the data provided\n     * @param {Function} onClick OnClick function provided by the user\n     * @param {Boolean} manual indicates if the user handle data manually\n     * @param {Function} onFetchData function to be executed when fetching data(only for table charts with\n     * server-side pagination)\n     * @param {Number} pages Total number of pages(only for table charts)\n     * @private\n     */\n    _getChartComponent(chartType, config, data, metadata, onClick, manual, onFetchData, pages) {\n        if (chartType === 'spark-line' || chartType === 'spark-area' || chartType === 'spark-bar') chartType = 'inline';\n\n        const component = {\n            line: LineChart,\n            area: AreaChart,\n            bar: BarChart,\n            composed: ComposedChart,\n            arc: ArcCharts,\n            scatter: ScatterPlot,\n            table: TableCharts,\n            number: NumberCharts,\n            inline: InlineCharts,\n            map: MapGenerator,\n        };\n\n        if (!component[chartType]) throw new VizGError('VizG', 'Invalid chart type defined in the configuration.');\n\n        const ChartComponent = component[chartType];\n\n        return (\n            <ChartComponent\n                config={config}\n                metadata={metadata}\n                data={data}\n                onClick={onClick}\n                yDomain={this.props.yDomain}\n                append={config.append}\n                theme={this.props.theme}\n                width={this.props.width}\n                height={this.props.height}\n\n                // table chart specific props\n                manual={manual} // to let the component know all the sorting and handling of data will be done by the user\n                onFetchData={onFetchData} // function to be executed when fetching data (only when serverside pagination enabled)\n                pages={pages} // Total number of pages that will be there in the table(only when serverside pagination enabled)\n            />\n        );\n    }\n\n    /**\n     * Check if the chart contains configuration of a mixed chart.\n     * @param config\n     * @returns {string}\n     * @private\n     */\n    _isComposed(config) {\n        const chartType = config.charts[0].type;\n        if ((chartType === 'line' || chartType === 'area' || chartType === 'bar') && config.charts.length > 1) {\n            const areaChart = _.find(config.charts, { type: 'area' });\n            const barChart = _.find(config.charts, { type: 'bar' });\n            const lineChart = _.find(config.charts, { type: 'line' });\n\n            if ((!areaChart && !barChart) || (!lineChart && !areaChart) || (!barChart && !lineChart)) {\n                return chartType;\n            } else {\n                return 'composed';\n            }\n        } else {\n            return chartType;\n        }\n    }\n\n    render() {\n        const { config, data, metadata, onClick, manual, onFetchData, pages } = this.props;\n        return (\n            <div style={{ height: '100%', width: '100%' }}>\n                {\n                    !config || !metadata ?\n                        null :\n                        this._getChartComponent(this._isComposed(config), config, data, metadata, onClick, manual,\n                            onFetchData, pages)\n                }\n            </div>\n        );\n    }\n}\n\nVizG.defaultProps = {\n    append: true,\n    theme: 'light',\n    width: 800,\n    height: 450,\n    manual: false,\n    pages: -1,\n};\n\nVizG.propTypes = {\n    config: PropTypes.object.isRequired,\n    data: PropTypes.array,\n    metadata: PropTypes.object.isRequired,\n    onClick: PropTypes.func,\n    append: PropTypes.bool,\n    theme: PropTypes.string,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    manual: PropTypes.bool,\n    onFetchData: PropTypes.func,\n    pages: PropTypes.number,\n};\n\nexport default VizG;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/VizG.jsx	(revision e32c2a308fde377438e64df7ab54db3b782f69a1)
+++ src/VizG.jsx	(date 1536040859206)
@@ -107,15 +107,29 @@
         }
     }
 
+    warningMessage(message) {
+        return (
+            <div style={{ display: 'flex', justifyContent: 'center', background: '#9E9E9E', color: '#000', fontWeight: 500 }}>
+                {message}
+            </div>
+        )
+    };
+
     render() {
         const { config, data, metadata, onClick, manual, onFetchData, pages } = this.props;
         return (
             <div style={{ height: '100%', width: '100%' }}>
                 {
-                    !config || !metadata ?
-                        null :
-                        this._getChartComponent(this._isComposed(config), config, data, metadata, onClick, manual,
-                            onFetchData, pages)
+                    (() => {
+                        if (!config || !metadata) {
+                            return this.warningMessage('No configurations available');
+                        } else if (!data.length) {
+                            return this.warningMessage('No data available');
+                        } else {
+                            return this._getChartComponent(this._isComposed(config), config, data, metadata, onClick,
+                                manual, onFetchData, pages)
+                        }
+                    })()
                 }
             </div>
         );
