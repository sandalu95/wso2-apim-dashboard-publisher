Index: samples/chart-docs/BarChartSamples.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Grid } from 'material-ui';\nimport VizG from '../../src/VizG';\nimport '../styles/snippet-highlight.css';\nimport ChartWrapper from '../ChartWrapper';\nimport { syntaxHighlight } from './util/SyntaxHighLight';\nimport Header from '../components/Header';\n\nexport default class BarChartSamples extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            data2: [],\n            timer: 1,\n        };\n\n        this.interval_id = null;\n        this.metadata = {\n            names: ['rpm', 'torque', 'horsepower', 'EngineType'],\n            types: ['linear', 'linear', 'linear', 'ordinal'],\n        };\n        this.barChartConfig = {\n            x: 'rpm',\n            charts: [{ type: 'bar', y: 'torque', color: 'EngineType', colorDomain: ['', '', 'piston'] }],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.singleBarChartConfig = {\n            x: 'rpm',\n            charts: [\n                { type: 'bar', y: 'horsepower', fill: '#2ca02c' },\n                { type: 'bar', y: 'torque', fill: '#ff7f0e' },\n            ],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.barChartStackedConfig = {\n            x: 'rpm',\n            charts: [{ type: 'bar', y: 'torque', color: 'EngineType', colorDomain: ['', '', 'piston'], mode: 'stacked' }],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.barChartStackedConfigHorizontal = {\n            x: 'rpm',\n            charts: [\n                {\n                    type: 'bar',\n                    y: 'torque',\n                    color: 'EngineType',\n                    colorDomain: ['', '', 'piston'],\n                    mode: 'stacked',\n                    orientation: 'left',\n                },\n            ],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.ordinalDataChart = {\n            x: 'Quarter',\n            charts: [\n                {\n                    type: 'bar',\n                    y: 'Sales',\n                    color: 'Product',\n                    mode: 'stacked',\n                },\n            ],\n            legend: true,\n        };\n\n        this.ordinalMetadata = {\n            names: ['Quarter', 'Sales', 'Product'],\n            types: ['ordinal', 'linear', 'ordinal'],\n        };\n\n        this.ordinalData = [\n            ['Q1', 100000, 'Product 1'],\n            ['Q1', 150000, 'Product 2'],\n            ['Q1', 50000, 'Product 3'],\n            ['Q1', 240000, 'Product 4'],\n            ['Q2', 14000, 'Product 1'],\n            ['Q2', 300000, 'Product 2'],\n            ['Q2', 140000, 'Product 3'],\n            ['Q2', 242000, 'Product 4'],\n            ['Q3', 110000, 'Product 1'],\n            ['Q3', 200000, 'Product 2'],\n            ['Q3', 140000, 'Product 3'],\n            ['Q3', 240000, 'Product 4'],\n            ['Q4', 240000, 'Product 1'],\n            ['Q4', 156009, 'Product 2'],\n            ['Q4', 149000, 'Product 3'],\n            ['Q4', 24000, 'Product 4'],\n        ];\n    }\n\n    componentDidMount() {\n        this.interval_id = setInterval(() => {\n            this.setState({\n                data: [\n                    [this.state.timer, this.state.timer === 20 ? null : Math.random() * 100, 10, 'piston'],\n                    [this.state.timer, Math.random() * 100, 10, 'rotary'],\n                ],\n                data2: [\n                    [this.state.timer, Math.random() * 100, Math.random() * 100, 'rotary'],\n                ],\n                timer: this.state.timer + 1,\n            });\n        }, 500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval_id);\n    }\n\n    render() {\n        return (\n            <div>\n                <Header url={'/samples'} title={'Bar Chart Samples'} />\n                <Grid container>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Bar Chart Sample with Color Categorization\" chart=\"line\" media\n                            actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG config={this.barChartConfig} metadata={this.metadata} data={this.state.data}\n                                        theme={this.props.theme} />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={\n                                            {\n                                                __html: syntaxHighlight(\n                                                    JSON.stringify(this.barChartConfig, undefined, 4)),\n                                            }\n                                        }\n                                    />\n                                </div>\n                            </div>\n\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Bar Chart Sample with an ordinal Dataset.\" chart=\"line\" media\n                            actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.ordinalDataChart}\n                                        metadata={this.ordinalMetadata}\n                                        data={this.ordinalData}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.ordinalDataChart, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Bar Chart Sample with Multiple Chart objects in the Config\" chart=\"line\"\n                            media actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.singleBarChartConfig}\n                                        metadata={this.metadata}\n                                        data={this.state.data2}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.singleBarChartConfig, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Stacked Bar Chart Sample\" chart=\"line\" media actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.barChartStackedConfig}\n                                        metadata={this.metadata}\n                                        data={this.state.data}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.barChartStackedConfig, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Horizontal Bar Chart Sample\" chart=\"line\" media actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.barChartStackedConfigHorizontal}\n                                        metadata={this.metadata}\n                                        data={this.state.data}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.barChartStackedConfigHorizontal, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Sample Data set\" chart=\"line\" media actionBar={false}>\n                            <div className=\"json-structure\" >\n                                metadata :\n                                <pre\n                                    dangerouslySetInnerHTML={{\n                                        __html: syntaxHighlight(JSON.stringify(this.metadata, undefined, 4)),\n                                    }}\n                                />\n                                <br />\n                                data :\n                                <pre\n                                    dangerouslySetInnerHTML={{\n                                        __html: syntaxHighlight(JSON.stringify(this.state.data, undefined, 4)),\n                                    }}\n                                />\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Chart JSON structure\" chart=\"line\" media actionBar={false}>\n                            <div className=\"json-structure\" >\n                                <ul>\n                                    <li>\n                                        <strong>x</strong> - Datafield representing the independant axis in the metadata\n                                    </li>\n                                    <li>\n                                        <strong>charts</strong> - Array of chart objects to be visualized.\n                                        <ul>\n                                            <li>\n                                                <strong>Chart Object</strong>\n                                                <ul>\n                                                    <li>\n                                                        <strong>type</strong> - type of the chart required to be visualized\n                                                    </li>\n                                                    <li>\n                                                        <strong>y</strong> - Data field representing y-axis in the metadata\n                                                    </li>\n                                                    <li>\n                                                        <strong>color</strong> - Data field representing color\n                                                        categorization data field of the metadata\n                                                    </li>\n                                                    <li>\n                                                        <strong>colorScale</strong> - Array of colors in hex form that\n                                                        will be over-riding the default color set\n                                                    </li>\n                                                    <li>\n                                                        <strong>colorDomain</strong> - If a certain color category needs\n                                                        to be plotted in a specific color.\n                                                    </li>\n                                                    <li>\n                                                        <strong>fill</strong> - If a color categorization field is not\n                                                        defined the color in which the data should be plotted.\n                                                    </li>\n                                                    <li>\n                                                        <strong>mode</strong> - mode of the chart stacked or not.\n                                                    </li>\n                                                    <li>\n                                                        <strong>orientation</strong> - orientation of the bars left or\n                                                        bottom\n                                                    </li>\n                                                </ul>\n                                            </li>\n                                            <li>....</li>\n                                        </ul>\n                                    </li>\n                                    <li>\n                                        <strong>maxLength</strong> - Max length of data points to be visualized in the\n                                        chart at time\n                                    </li>\n                                    <li>\n                                        <strong>legend</strong> - enable or disable legend (boolean) value.\n                                    </li>\n                                    <li>\n                                        <strong>Append</strong> - Append the incoming data to the existing dataset or\n                                        replace the existing dataset boolean value.\n                                    </li>\n                                    <li>\n                                        <strong>timeFormat</strong> - If the x-axis is a time series using this attribute\n                                        user can format the tick values of the x axis using regex. refer&nbsp;\n                                        <a href={'https://github.com/d3/d3-time-format/blob/master/README.md#timeFormat'}>\n                                            d3 documentation\n                                        </a> for more info\n                                    </li>\n                                    <li>\n                                        <strong>tipTimeFormat</strong> - If the x-axis is a time series using this attribute\n                                        user can format the tick values of the x axis using regex. refer&nbsp;\n                                        <a href={'https://github.com/d3/d3-time-format/blob/master/README.md#timeFormat'}>\n                                            d3 documentation\n                                        </a> for more info\n                                    </li>\n                                    <li><strong>animate</strong> - animate chart visualizations</li>\n                                    <li><strong>disableVerticleGrid</strong> - Disable verticle grid of the chart\n                                        (boolean value)</li>\n                                    <li><strong>disableHorizontalGrid</strong> - Disable horizontal grid of the chart\n                                        (boolean value)</li>\n                                    <li><strong>yAxisLabel</strong> - Change the label shown along the y-axis</li>\n                                    <li><strong>xAxisLabel</strong> - Change the label shown along the x-axis</li>\n                                    <li><strong>yAxisTickCount</strong> - Number of ticks shown in the y-axis</li>\n                                    <li><strong>xAxisTickCount</strong> - Number of ticks shown in the x-axis</li>\n                                    <li><strong>legendOrientaion</strong> - Orientaion of the legend relative to the\n                                        chart top | bottom | left | right)</li>\n                                    <li><strong>timeStep</strong> - Define the interval between two tick values in the \n                                    series('day' | 'month' | 'year' | 'minute' | 'hour' | 'second' | 'millisecond') \n                                    *Only for timeSeries bar chart</li>\n                                    <li><strong>linearSeriesStep</strong> - Define the interval between two tick values\n                                     in the series(Number) *Only for linearSeries bar chart</li>\n                                    <li><strong>brush</strong> - show a component to brush data(boolean value)</li>\n                                    <li>\n                                        <strong>style</strong> - object that contain style attributes of the charts.\n                                        <ul>\n                                            <li><strong>axisColor</strong> - color of the axis lines</li>\n                                            <li><strong>axisLabelColor</strong> - color of the axis labels</li>\n                                            <li><strong>xAxisTickAngle</strong> - Tick angle of the x-axis ticks</li>\n                                            <li><strong>yAxisTickAngle</strong> - Tick angle of the y-axis ticks</li>\n                                            <li><strong>tickLabelColor</strong> - font color of the tickLabels</li>\n                                        </ul>\n                                    </li>\n                                </ul>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n\n                </Grid>\n            </div>\n        );\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- samples/chart-docs/BarChartSamples.jsx	(revision cae543b7269fc0c72a2712b9590f34c1b10a31ea)
+++ samples/chart-docs/BarChartSamples.jsx	(date 1535453882198)
@@ -88,6 +88,9 @@
                     mode: 'stacked',
                 },
             ],
+            style: {
+                xAxisTickAngle: 15,
+            },
             legend: true,
         };
 
@@ -97,10 +100,10 @@
         };
 
         this.ordinalData = [
-            ['Q1', 100000, 'Product 1'],
-            ['Q1', 150000, 'Product 2'],
-            ['Q1', 50000, 'Product 3'],
-            ['Q1', 240000, 'Product 4'],
+            ['Q1dadsadadadaddadsasda', 100000, 'Product 1'],
+            ['Q1dadsadadadaddadsasda', 150000, 'Product 2'],
+            ['Q1dadsadadadaddadsasda', 50000, 'Product 3'],
+            ['Q1dadsadadadaddadsasda', 240000, 'Product 4'],
             ['Q2', 14000, 'Product 1'],
             ['Q2', 300000, 'Product 2'],
             ['Q2', 140000, 'Product 3'],
@@ -114,6 +117,101 @@
             ['Q4', 149000, 'Product 3'],
             ['Q4', 24000, 'Product 4'],
         ];
+
+        this.ChartConfig =
+            {
+                x: "username",
+                charts: [
+                    {
+                        type: "bar",
+                        y: "duration",
+                        color: "sessionId",
+                        colorScale: ["#00e600"],
+                        orientation: "left"
+                    }
+                ],
+                yAxisLabel: ' Duration (s)',
+                xAxisLabel: 'Username',
+                axisTickLength: 14,
+                style: {
+                    yAxisTickAngle: -45,
+                },
+                maxLength: 10,
+                legend: false,
+                append: false,
+            };
+
+        this.metadata2 = {
+            names: ['sessionId','username', 'duration'],
+            types: ['ordinal','ordinal', 'linear']
+
+        };
+
+        this.timeData = [
+            ['aee5a229d89ff88539f2f3ba81aa563d678732eff818a57c22d8b5410ab902e1','PRIMARY/yoges@carbon.supe', 11996],
+            ['86c2649a92a1137794470c5fd2a50ec950fa5e054b7187a52c6b162078b98cd8', 'PRIMARY', 1365065],
+            ['bf5f59fbb0b6409c1089d9a124820e1f74e838eb5fc032aa1537828fe40406e9','PRIMARY/srihari@carbon.super', 974545],
+            ['1efb87b90fc79545b027e13f5e92f05375e01fd927ab71da92be20a22c8d46a8', 'PRIMARY/admin@carbon.super', 1365065],
+            ['1efb87b90fc79545b027e13f5e92f05375e01fd927ab71da92be20a22c8d46a9', 'PRIMARY/admin2@carbon.super', 1365069],
+        ];
+
+        this.ChartConfig3 =
+            {
+                "x": "rpm",
+                "charts": [
+                    {
+                        "type": "bar",
+                        "y": "torque",
+                        "color": "EngineType",
+                        "colorDomain": [
+                            "",
+                            "",
+                            "piston"
+                            ]
+                    }
+                ],
+                "maxLength": 7,
+                "legend": true,
+            };
+
+        this.ChartConfig4 =
+            {
+                "x": "rpm",
+                "charts": [
+                    {
+                        "type": "line",
+                        "y": "torque",
+                        "color": "EngineType",
+                        "colorDomain": [
+                            "",
+                            "",
+                            "piston"
+                        ]
+                    }
+                ],
+                "maxLength": 7,
+                "legend": true,
+            };
+
+        this.metadata3 = {
+            "names": [
+                "rpm",
+                "torque",
+                "horsepower",
+                "EngineType"
+            ],
+            "types": [
+                "linear",
+                "linear",
+                "linear",
+                "ordinal"
+            ]
+        };
+
+        this.timeData3 = [
+            [40,20, 10,'piston'],
+        ];
+
     }
 
     componentDidMount() {
@@ -378,6 +476,13 @@
                                 </ul>
                             </div>
                         </ChartWrapper>
+
+                        <VizG config={this.ChartConfig} metadata={this.metadata2} data={this.timeData} />
+
+                        <VizG config={this.ChartConfig3} metadata={this.metadata3} data={this.timeData3} />
+
+                        <VizG config={this.ChartConfig4} metadata={this.metadata3} data={this.timeData3} />
+
                     </Grid>
 
                 </Grid>
Index: src/components/ChartContainer.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport {\n    VictoryChart,\n    VictoryZoomContainer,\n    VictoryVoronoiContainer,\n    VictoryContainer,\n    VictoryAxis,\n    VictoryLabel,\n} from 'victory';\nimport { timeFormat } from 'd3';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport lightTheme from './resources/themes/victoryLightTheme';\nimport darkTheme from './resources/themes/victoryDarkTheme';\n\n/**\n * React component that contains the logic for VictoryChart component.\n */\nexport default class ChartContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            counter: 0,\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ counter: this.state.counter + 1 });\n    }\n\n    xAxisTickFormat(xScale, config, isOrdinal, arr) {\n        if (xScale === 'time' && config.timeFormat) {\n            return (date) => {\n                return timeFormat(config.timeFormat)(new Date(date));\n            };\n        } else if (isOrdinal && config.charts[0].type === 'bar') {\n            return (data) => {\n                if ((data - Math.floor(data)) !== 0) {\n                    return '';\n                } else if ((arr[Number(data) - 1].x).length > (config.axisTickLength ? config.axisTickLength : 13)) {\n                    return (arr[Number(data) - 1].x).slice(0, config.axisTickLength ? config.axisTickLength :\n                        10) + '...';\n                } else {\n                    return Number(data) <= arr.length ? arr[Number(data) - 1].x : data;\n                }\n            };\n        } else if (xScale === 'linear') {\n            return (data) => {\n                if (data % 1 !== 0) {\n                    return data;\n                } else {\n                    return Number(data).toFixed(0);\n                }\n            };\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        const { width, height, xScale,\n            theme, config, horizontal, disableAxes, yDomain, isOrdinal, dataSets, barData, arcChart } = this.props;\n        const currentTheme = theme === 'light' ? lightTheme : darkTheme;\n        let arr = null;\n        let xDomain = null;\n        const xAxisPaddingBottom = config.style ? config.style.xAxisPaddingBottom || 50 : 50;\n\n        if (isOrdinal && ((_.findIndex(config.charts, o => o.type === 'bar')) > -1)) {\n            arr = dataSets[Object.keys(dataSets)[0]] || [];\n        } else if ((_.findIndex(config.charts, o => o.type === 'bar')) > -1) {\n            const found0 = _.findIndex(_.values(dataSets), (o) => {\n                if (o.length > 0) {\n                    return o[0].x === 0;\n                } else {\n                    return false;\n                }\n            });\n\n            if (found0 > -1 && !horizontal) {\n                let maxOne = null;\n                _.keys(dataSets).forEach((key) => {\n                    const max = _.maxBy(dataSets[key], o => o.x);\n                    if (!maxOne) maxOne = max.x;\n                    else if (maxOne < max) maxOne = max.x;\n                });\n                xDomain = [-1, maxOne];\n            }\n        }\n\n        let domainPadding = null;\n\n        if (barData) {\n            domainPadding = Math.floor(barData.fullBarWidth / 2) + 1;\n            domainPadding = (domainPadding > 50) ? (domainPadding + 30) : domainPadding;\n        }\n\n        return (\n            <VictoryChart\n                width={width}\n                height={height}\n                domainPadding={{ x: horizontal ? 20 : domainPadding, y: horizontal ? domainPadding : 20 }}\n                padding={\n                    (() => {\n                        if (config.legend === true || arcChart) {\n                            if (!config.legendOrientation) return {\n                                left: 100, top: 30, bottom: xAxisPaddingBottom,\n                                right: 180\n                            };\n                            else if (config.legendOrientation === 'left') {\n                                return { left: 300, top: 30, bottom: xAxisPaddingBottom, right: 30 };\n                            } else if (config.legendOrientation === 'right') {\n                                return { left: 100, top: 30, bottom: xAxisPaddingBottom, right: 180 };\n                            } else if (config.legendOrientation === 'top') {\n                                return { left: 100, top: 100, bottom: xAxisPaddingBottom, right: 30 };\n                            } else if (config.legendOrientation === 'bottom') {\n                                return { left: 100, top: 30, bottom: (100 + xAxisPaddingBottom), right: 30 };\n                            } else return { left: 100, top: 30, bottom: xAxisPaddingBottom, right: 180 };\n                        } else {\n                            return { left: 100, top: 30, bottom: xAxisPaddingBottom, right: 30 };\n                        }\n                    })()\n                }\n                scale={horizontal ? { x: 'linear', y: xScale } : { x: xScale, y: 'linear' }}\n                theme={currentTheme}\n                containerComponent={\n                    this.props.disableContainer ?\n                        config.brush ?\n                            <VictoryZoomContainer\n                                dimension=\"x\"\n                            /> :\n                            <VictoryContainer /> :\n                        config.brush ?\n                            <VictoryZoomContainer\n                                dimension=\"x\"\n                            /> :\n                            <VictoryVoronoiContainer\n                                voronoiDimension=\"x\"\n                                voronoiBlacklist={['blacked']}\n                            />\n                }\n                domain={{ x: config.xDomain ? config.xDomain : xDomain, y: config.yDomain ? config.yDomain : yDomain }}\n                style={{ parent: { overflow: 'visible' } }}\n\n            >\n                {this.props.children}\n                {\n                    disableAxes ?\n                        [\n                            (<VictoryAxis\n                                key=\"xAxis\"\n                                crossAxis\n                                gridComponent={<g />}\n                                tickComponent={<g />}\n                                tickLabelComponent={<g />}\n                                axisComponent={<g />}\n                            />),\n                            (<VictoryAxis\n                                key=\"yAxis\"\n                                dependentAxis\n                                crossAxis\n                                gridComponent={<g />}\n                                tickComponent={<g />}\n                                tickLabelComponent={<g />}\n                                axisComponent={<g />}\n                            />),\n                        ] :\n                        [\n                            (<VictoryAxis\n                                key=\"xAxis\"\n                                crossAxis\n                                theme={currentTheme}\n                                style={{\n                                    axis: {\n                                        stroke: config.style ?\n                                            config.style.axisColor :\n                                            currentTheme.axis.style.axis.stroke,\n                                    },\n                                    axisLabel: {\n                                        fill: config.style ?\n                                            config.style.axisLabelColor :\n                                            currentTheme.axis.style.axisLabel.fill,\n                                    },\n                                }}\n                                gridComponent={config.disableVerticalGrid ?\n                                    <g /> :\n                                    <line\n                                        style={{\n                                            stroke: config.style ?\n                                                config.style.gridColor || currentTheme.axis.style.grid.stroke :\n                                                currentTheme.axis.style.grid.stroke,\n                                            strokeOpacity: currentTheme.axis.style.grid.strokeOpacity,\n                                            fill: currentTheme.axis.style.grid.fill,\n                                        }}\n                                    />\n                                }\n                                label={\n                                    horizontal ?\n                                        config.yAxisLabel || ((config.charts.length > 1 ? '' : config.charts[0].y)) :\n                                        config.xAxisLabel || config.x\n                                }\n                                tickFormat={horizontal ? null : this.xAxisTickFormat(xScale, config, isOrdinal, arr)}\n                                standalone={false}\n                                tickLabelComponent={\n                                    <VictoryLabel\n                                        angle={config.style ? config.style.xAxisTickAngle || 0 : 0}\n                                        theme={currentTheme}\n                                        style={{\n                                            fill: config.style ?\n                                                config.style.tickLabelColor : currentTheme.axis.style.tickLabels.fill,\n                                        }}\n                                    />\n                                }\n                                tickCount={(isOrdinal && config.charts[0].type === 'bar') ? arr.length :\n                                    config.xAxisTickCount}\n                                counter={this.state.counter}\n                            />),\n                            (<VictoryAxis\n                                key=\"yAxis\"\n                                dependentAxis\n                                crossAxis\n                                theme={currentTheme}\n                                style={{\n                                    axis: {\n                                        stroke: config.style ?\n                                            config.style.axisColor :\n                                            currentTheme.axis.style.axis.stroke,\n                                    },\n                                    axisLabel: {\n                                        fill: config.style ?\n                                            config.style.axisLabelColor :\n                                            currentTheme.axis.style.axisLabel.fill,\n                                    },\n                                }}\n                                gridComponent={\n                                    config.disableHorizontalGrid ?\n                                        <g /> :\n                                        <line\n                                            style={{\n                                                stroke: config.gridColor || currentTheme.axis.style.grid.stroke,\n                                                strokeOpacity: currentTheme.axis.style.grid.strokeOpacity,\n                                                fill: currentTheme.axis.style.grid.fill,\n                                            }}\n                                        />\n                                }\n                                label={\n                                    horizontal ?\n                                        config.xAxisLabel || config.x :\n                                        config.yAxisLabel || (config.charts.length > 1 ? '' : config.charts[0].y)\n                                }\n                                standalone={false}\n                                tickLabelComponent={\n                                    <VictoryLabel\n                                        angle={config.style ? config.style.yAxisTickAngle || 0 : 0}\n                                        theme={currentTheme}\n                                        style={{\n                                            fill: config.style ?\n                                                config.style.tickLabelColor :\n                                                currentTheme.axis.style.tickLabels.fill,\n                                        }}\n                                    />\n                                }\n                                tickFormat={!horizontal ? null : this.xAxisTickFormat(xScale, config, isOrdinal, arr)}\n                                axisLabelComponent={\n                                    <VictoryLabel\n                                        angle={0}\n                                        x={100}\n                                        y={25}\n                                    />\n                                }\n                                tickCount={config.yAxisTickCount}\n                            />),\n                        ]\n                }\n            </VictoryChart>\n        );\n    }\n}\n\nChartContainer.defaultProps = {\n    yDomain: null,\n    xDomain: null,\n    children: [],\n    disableContainer: false,\n    horizontal: false,\n    disableAxes: false,\n};\n\nChartContainer.propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    xScale: PropTypes.string.isRequired,\n    yDomain: PropTypes.arrayOf(PropTypes.number),\n    xDomain: PropTypes.arrayOf(PropTypes.number),\n    children: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])),\n    config: PropTypes.shape({\n        x: PropTypes.string,\n        charts: PropTypes.arrayOf(PropTypes.shape({\n            type: PropTypes.string.isRequired,\n            y: PropTypes.string,\n            fill: PropTypes.string,\n            color: PropTypes.string,\n            colorScale: PropTypes.arrayOf(PropTypes.string),\n            colorDomain: PropTypes.arrayOf(PropTypes.string),\n            mode: PropTypes.string,\n        })),\n        legendOrientation: PropTypes.string,\n        style: {\n            tickLabelColor: PropTypes.string,\n            legendTitleColor: PropTypes.string,\n            legendTextColor: PropTypes.string,\n            axisColor: PropTypes.string,\n            axisLabelColor: PropTypes.string,\n            gridColor: PropTypes.string,\n            xAxisTickAngle: PropTypes.number,\n            yAxisTickAngle: PropTypes.number,\n        },\n        disableVerticalGrid: PropTypes.bool,\n        disableHorizontalGrid: PropTypes.bool,\n        xAxisLabel: PropTypes.string,\n        yAxisLabel: PropTypes.string,\n        yAxisTickCount: PropTypes.number,\n        xAxisTickCount: PropTypes.number,\n        axisTickLength: PropTypes.number,\n        height: PropTypes.number,\n        width: PropTypes.number,\n        maxLength: PropTypes.number,\n    }).isRequired,\n    disableContainer: PropTypes.bool,\n    horizontal: PropTypes.bool,\n    disableAxes: PropTypes.bool,\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/ChartContainer.jsx	(revision cae543b7269fc0c72a2712b9590f34c1b10a31ea)
+++ src/components/ChartContainer.jsx	(date 1535452156035)
@@ -39,6 +39,7 @@
     constructor(props) {
         super(props);
         this.state = {
+            isxTickSliced: false,
             counter: 0,
         };
     }
@@ -57,6 +58,7 @@
                 if ((data - Math.floor(data)) !== 0) {
                     return '';
                 } else if ((arr[Number(data) - 1].x).length > (config.axisTickLength ? config.axisTickLength : 13)) {
+                    this.setState({ isxTickSliced: true });
                     return (arr[Number(data) - 1].x).slice(0, config.axisTickLength ? config.axisTickLength :
                         10) + '...';
                 } else {
@@ -86,12 +88,32 @@
 
         if (isOrdinal && ((_.findIndex(config.charts, o => o.type === 'bar')) > -1)) {
             arr = dataSets[Object.keys(dataSets)[0]] || [];
-        } else if ((_.findIndex(config.charts, o => o.type === 'bar')) > -1) {
+        } else {
             const found0 = _.findIndex(_.values(dataSets), (o) => {
                 if (o.length > 0) {
-                    return o[0].x === 0;
-                } else {
-                    return false;
+                    let maxOne = null;
+                    _.keys(dataSets).forEach((key) => {
+                        const max = _.maxBy(dataSets[key], o => o.x);
+                        if (!maxOne) maxOne = max.x;
+                        else if (maxOne < max) maxOne = max.x;
+                    });
+
+                    let minOne = null;
+                    let isOne = false;
+                    _.keys(dataSets).forEach((key) => {
+                        const min = _.minBy(dataSets[key], o => o.x);
+                        console.log(dataSets[key]);
+                        if (!minOne) minOne = min.x;
+                        else if (minOne > min) minOne = min.x;
+                    });
+
+                    xDomain = [minOne - (minOne * 0.1), maxOne + (maxOne * 0.1)];
+
+                    // if (o.length = 1) {
+                    //     xDomain = [minOne - (minOne * 0.1), maxOne + (maxOne * 0.1)];
+                    // } else {
+                    //     xDomain = [minOne, maxOne];
+                    // }
                 }
             });
 
@@ -221,7 +243,15 @@
                                 standalone={false}
                                 tickLabelComponent={
                                     <VictoryLabel
-                                        angle={config.style ? config.style.xAxisTickAngle || 0 : 0}
+                                        angle={() => {
+                                            if (config.style && (config.style.xAxisTickAngle)) {
+                                                return config.style.xAxisTickAngle;
+                                            } else if (this.state.isxTickSliced) {
+                                                return 45;
+                                            } else {
+                                                return 0;
+                                            }
+                                        }}
                                         theme={currentTheme}
                                         style={{
                                             fill: config.style ?
