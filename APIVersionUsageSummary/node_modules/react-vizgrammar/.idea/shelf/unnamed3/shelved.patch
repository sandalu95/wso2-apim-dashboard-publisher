Index: samples/chart-docs/BarChartSamples.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Grid } from 'material-ui';\nimport VizG from '../../src/VizG';\nimport '../styles/snippet-highlight.css';\nimport ChartWrapper from '../ChartWrapper';\nimport { syntaxHighlight } from './util/SyntaxHighLight';\nimport Header from '../components/Header';\n\nexport default class BarChartSamples extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            data2: [],\n            timer: 1,\n        };\n\n        this.interval_id = null;\n        this.metadata = {\n            names: ['rpm', 'torque', 'horsepower', 'EngineType'],\n            types: ['linear', 'linear', 'linear', 'ordinal'],\n        };\n        this.barChartConfig = {\n            x: 'rpm',\n            charts: [{ type: 'bar', y: 'torque', color: 'EngineType', colorDomain: ['', '', 'piston'] }],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.singleBarChartConfig = {\n            x: 'rpm',\n            charts: [\n                { type: 'bar', y: 'horsepower', fill: '#2ca02c' },\n                { type: 'bar', y: 'torque', fill: '#ff7f0e' },\n            ],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.barChartStackedConfig = {\n            x: 'rpm',\n            charts: [{ type: 'bar', y: 'torque', color: 'EngineType', colorDomain: ['', '', 'piston'], mode: 'stacked' }],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.barChartStackedConfigHorizontal = {\n            x: 'rpm',\n            charts: [\n                {\n                    type: 'bar',\n                    y: 'torque',\n                    color: 'EngineType',\n                    colorDomain: ['', '', 'piston'],\n                    mode: 'stacked',\n                    orientation: 'left',\n                },\n            ],\n            maxLength: 7,\n            legend: true,\n        };\n\n        this.ordinalDataChart = {\n            x: 'Quarter',\n            charts: [\n                {\n                    type: 'bar',\n                    y: 'Sales',\n                    color: 'Product',\n                    mode: 'stacked',\n                },\n            ],\n            legend: true,\n        };\n\n        this.ordinalMetadata = {\n            names: ['Quarter', 'Sales', 'Product'],\n            types: ['ordinal', 'linear', 'ordinal'],\n        };\n\n        this.ordinalData = [\n            ['Q1', 100000, 'Product 1'],\n            ['Q1', 150000, 'Product 2'],\n            ['Q1', 50000, 'Product 3'],\n            ['Q1', 240000, 'Product 4'],\n            ['Q2', 14000, 'Product 1'],\n            ['Q2', 300000, 'Product 2'],\n            ['Q2', 140000, 'Product 3'],\n            ['Q2', 242000, 'Product 4'],\n            ['Q3', 110000, 'Product 1'],\n            ['Q3', 200000, 'Product 2'],\n            ['Q3', 140000, 'Product 3'],\n            ['Q3', 240000, 'Product 4'],\n            ['Q4', 240000, 'Product 1'],\n            ['Q4', 156009, 'Product 2'],\n            ['Q4', 149000, 'Product 3'],\n            ['Q4', 24000, 'Product 4'],\n        ];\n    }\n\n    componentDidMount() {\n        this.interval_id = setInterval(() => {\n            this.setState({\n                data: [\n                    [this.state.timer, this.state.timer === 20 ? null : Math.random() * 100, 10, 'piston'],\n                    [this.state.timer, Math.random() * 100, 10, 'rotary'],\n                ],\n                data2: [\n                    [this.state.timer, Math.random() * 100, Math.random() * 100, 'rotary'],\n                ],\n                timer: this.state.timer + 1,\n            });\n        }, 500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval_id);\n    }\n\n    render() {\n        return (\n            <div>\n                <Header url={'/samples'} title={'Bar Chart Samples'} />\n                <Grid container>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Bar Chart Sample with Color Categorization\" chart=\"line\" media\n                            actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG config={this.barChartConfig} metadata={this.metadata} data={this.state.data}\n                                        theme={this.props.theme} />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={\n                                            {\n                                                __html: syntaxHighlight(\n                                                    JSON.stringify(this.barChartConfig, undefined, 4)),\n                                            }\n                                        }\n                                    />\n                                </div>\n                            </div>\n\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Bar Chart Sample with an ordinal Dataset.\" chart=\"line\" media\n                            actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.ordinalDataChart}\n                                        metadata={this.ordinalMetadata}\n                                        data={this.ordinalData}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.ordinalDataChart, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Bar Chart Sample with Multiple Chart objects in the Config\" chart=\"line\"\n                            media actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.singleBarChartConfig}\n                                        metadata={this.metadata}\n                                        data={this.state.data2}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.singleBarChartConfig, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Stacked Bar Chart Sample\" chart=\"line\" media actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.barChartStackedConfig}\n                                        metadata={this.metadata}\n                                        data={this.state.data}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.barChartStackedConfig, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Horizontal Bar Chart Sample\" chart=\"line\" media actionBar={false}>\n                            <div>\n                                <div style={{ height: 450 }}>\n                                    <VizG\n                                        config={this.barChartStackedConfigHorizontal}\n                                        metadata={this.metadata}\n                                        data={this.state.data}\n                                        theme={this.props.theme}\n                                    />\n                                </div>\n                                <div>\n                                    <br /><br />\n                                    <pre\n                                        dangerouslySetInnerHTML={{\n                                            __html: syntaxHighlight(JSON\n                                                .stringify(this.barChartStackedConfigHorizontal, undefined, 4)),\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Sample Data set\" chart=\"line\" media actionBar={false}>\n                            <div className=\"json-structure\" >\n                                metadata :\n                                <pre\n                                    dangerouslySetInnerHTML={{\n                                        __html: syntaxHighlight(JSON.stringify(this.metadata, undefined, 4)),\n                                    }}\n                                />\n                                <br />\n                                data :\n                                <pre\n                                    dangerouslySetInnerHTML={{\n                                        __html: syntaxHighlight(JSON.stringify(this.state.data, undefined, 4)),\n                                    }}\n                                />\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n                    <Grid item lg={6} sm={12} xs={12} >\n                        <ChartWrapper title=\"Chart JSON structure\" chart=\"line\" media actionBar={false}>\n                            <div className=\"json-structure\" >\n                                <ul>\n                                    <li>\n                                        <strong>x</strong> - Datafield representing the independant axis in the metadata\n                                    </li>\n                                    <li>\n                                        <strong>charts</strong> - Array of chart objects to be visualized.\n                                        <ul>\n                                            <li>\n                                                <strong>Chart Object</strong>\n                                                <ul>\n                                                    <li>\n                                                        <strong>type</strong> - type of the chart required to be visualized\n                                                    </li>\n                                                    <li>\n                                                        <strong>y</strong> - Data field representing y-axis in the metadata\n                                                    </li>\n                                                    <li>\n                                                        <strong>color</strong> - Data field representing color\n                                                        categorization data field of the metadata\n                                                    </li>\n                                                    <li>\n                                                        <strong>colorScale</strong> - Array of colors in hex form that\n                                                        will be over-riding the default color set\n                                                    </li>\n                                                    <li>\n                                                        <strong>colorDomain</strong> - If a certain color category needs\n                                                        to be plotted in a specific color.\n                                                    </li>\n                                                    <li>\n                                                        <strong>fill</strong> - If a color categorization field is not\n                                                        defined the color in which the data should be plotted.\n                                                    </li>\n                                                    <li>\n                                                        <strong>mode</strong> - mode of the chart stacked or not.\n                                                    </li>\n                                                    <li>\n                                                        <strong>orientation</strong> - orientation of the bars left or\n                                                        bottom\n                                                    </li>\n                                                </ul>\n                                            </li>\n                                            <li>....</li>\n                                        </ul>\n                                    </li>\n                                    <li>\n                                        <strong>maxLength</strong> - Max length of data points to be visualized in the\n                                        chart at time\n                                    </li>\n                                    <li>\n                                        <strong>legend</strong> - enable or disable legend (boolean) value.\n                                    </li>\n                                    <li>\n                                        <strong>Append</strong> - Append the incoming data to the existing dataset or\n                                        replace the existing dataset boolean value.\n                                    </li>\n                                    <li>\n                                        <strong>timeFormat</strong> - If the x-axis is a time series using this attribute\n                                        user can format the tick values of the x axis using regex. refer&nbsp;\n                                        <a href={'https://github.com/d3/d3-time-format/blob/master/README.md#timeFormat'}>\n                                            d3 documentation\n                                        </a> for more info\n                                    </li>\n                                    <li>\n                                        <strong>tipTimeFormat</strong> - If the x-axis is a time series using this attribute\n                                        user can format the tick values of the x axis using regex. refer&nbsp;\n                                        <a href={'https://github.com/d3/d3-time-format/blob/master/README.md#timeFormat'}>\n                                            d3 documentation\n                                        </a> for more info\n                                    </li>\n                                    <li><strong>animate</strong> - animate chart visualizations</li>\n                                    <li><strong>disableVerticleGrid</strong> - Disable verticle grid of the chart\n                                        (boolean value)</li>\n                                    <li><strong>disableHorizontalGrid</strong> - Disable horizontal grid of the chart\n                                        (boolean value)</li>\n                                    <li><strong>yAxisLabel</strong> - Change the label shown along the y-axis</li>\n                                    <li><strong>xAxisLabel</strong> - Change the label shown along the x-axis</li>\n                                    <li><strong>yAxisTickCount</strong> - Number of ticks shown in the y-axis</li>\n                                    <li><strong>xAxisTickCount</strong> - Number of ticks shown in the x-axis</li>\n                                    <li><strong>legendOrientaion</strong> - Orientaion of the legend relative to the\n                                        chart top | bottom | left | right)</li>\n                                    <li><strong>timeStep</strong> - Define the interval between two tick values in the \n                                    series('day' | 'month' | 'year' | 'minute' | 'hour' | 'second' | 'millisecond') \n                                    *Only for timeSeries bar chart</li>\n                                    <li><strong>linearSeriesStep</strong> - Define the interval between two tick values\n                                     in the series(Number) *Only for linearSeries bar chart</li>\n                                    <li><strong>brush</strong> - show a component to brush data(boolean value)</li>\n                                    <li>\n                                        <strong>style</strong> - object that contain style attributes of the charts.\n                                        <ul>\n                                            <li><strong>axisColor</strong> - color of the axis lines</li>\n                                            <li><strong>axisLabelColor</strong> - color of the axis labels</li>\n                                            <li><strong>xAxisTickAngle</strong> - Tick angle of the x-axis ticks</li>\n                                            <li><strong>yAxisTickAngle</strong> - Tick angle of the y-axis ticks</li>\n                                            <li><strong>tickLabelColor</strong> - font color of the tickLabels</li>\n                                        </ul>\n                                    </li>\n                                </ul>\n                            </div>\n                        </ChartWrapper>\n                    </Grid>\n\n                </Grid>\n            </div>\n        );\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- samples/chart-docs/BarChartSamples.jsx	(date 1536589269000)
+++ samples/chart-docs/BarChartSamples.jsx	(date 1536741314202)
@@ -88,6 +88,9 @@
                     mode: 'stacked',
                 },
             ],
+            style: {
+                xAxisTickAngle: 15,
+            },
             legend: true,
         };
 
@@ -97,10 +100,10 @@
         };
 
         this.ordinalData = [
-            ['Q1', 100000, 'Product 1'],
-            ['Q1', 150000, 'Product 2'],
-            ['Q1', 50000, 'Product 3'],
-            ['Q1', 240000, 'Product 4'],
+            ['Q1dadsadadadaddadsasda', 100000, 'Product 1'],
+            ['Q1dadsadadadaddadsasda', 150000, 'Product 2'],
+            ['Q1dadsadadadaddadsasda', 50000, 'Product 3'],
+            ['Q1dadsadadadaddadsasda', 240000, 'Product 4'],
             ['Q2', 14000, 'Product 1'],
             ['Q2', 300000, 'Product 2'],
             ['Q2', 140000, 'Product 3'],
@@ -114,21 +117,159 @@
             ['Q4', 149000, 'Product 3'],
             ['Q4', 24000, 'Product 4'],
         ];
+
+
+        this.ordinalDataChart2 = {
+            x: 'Quarter',
+            charts: [
+                {
+                    type: 'bar',
+                    y: 'Sales',
+                    color: 'Product',
+                    // mode: 'stacked',
+                    // orientation: 'left',
+                },
+            ],
+            legend: true,
+            // timeFormat: true,
+        };
+
+        this.ordinalMetadata2 = {
+            names: ['Quarter', 'Sales', 'Product'],
+            types: ['time', 'linear', 'ordinal'],
+        };
+
+        this.timeData2 = [
+            [new Date('2015-02-01 00:00:00.000').getTime(), 100000, 'Product 1'],
+            [new Date('2015-02-02 00:00:00.000').getTime(), 100000, 'Product 1'],
+            [new Date('2015-02-03 00:00:00.000').getTime(), 100000, 'Product 1'],
+            [new Date('2015-02-06 00:00:00.000').getTime(), 100000, 'Product 1'],
+            [new Date('2015-02-04 00:00:00.000').getTime(), 100000, 'Product 1'],
+            //
+            // [new Date('2015-02-05 02:02:00.000').getTime(), 100000, 'Product 1'],
+            // [new Date('2015-02-06 02:02:00.000').getTime(), 100000, 'Product 1'],
+
+            // [new Date('2015-02-06 02:02:00.000').getTime(), 100000, 'Product 2'],
+            // [new Date('2015-02-08 02:02:00.000').getTime(), 100000, 'Product 2'],
+            //
+            // [new Date('2015-02-09 02:02:00.000').getTime(), 100000, 'Product 2'],
+
+        ];
+
+        this.timeData13 = [
+            [new Date('2015-02-01 00:00:00.000').getTime(), 100000, 'Product 1'],
+            [new Date('2015-02-01 00:00:00.000').getTime(), 100000, 'Product 2']
+        ];
+
+        this.ChartConfig =
+            {
+                x: "username",
+                charts: [
+                    {
+                        type: "bar",
+                        y: "duration",
+                        color: "sessionId",
+                        colorScale: ["#00e600"],
+                        orientation: "left"
+                    }
+                ],
+                yAxisLabel: ' Duration (s)',
+                xAxisLabel: 'Username',
+                axisTickLength: 14,
+                style: {
+                    yAxisTickAngle: -45,
+                },
+                maxLength: 10,
+                legend: false,
+                append: false,
+            };
+
+        this.metadata2 = {
+            names: ['sessionId','username', 'duration'],
+            types: ['ordinal','ordinal', 'linear']
+
+        };
+
+        this.timeData = [
+            ['aee5a229d89ff88539f2f3ba81aa563d678732eff818a57c22d8b5410ab902e1','PRIMARY/yoges@carbon.supe', 11996],
+            ['86c2649a92a1137794470c5fd2a50ec950fa5e054b7187a52c6b162078b98cd8', 'PRIMARY', 1365065],
+            ['bf5f59fbb0b6409c1089d9a124820e1f74e838eb5fc032aa1537828fe40406e9','PRIMARY/srihari@carbon.super', 974545],
+            ['1efb87b90fc79545b027e13f5e92f05375e01fd927ab71da92be20a22c8d46a8', 'PRIMARY/admin@carbon.super', 1365065],
+            ['1efb87b90fc79545b027e13f5e92f05375e01fd927ab71da92be20a22c8d46a9', 'PRIMARY/admin2@carbon.super', 1365069],
+        ];
+
+        this.ChartConfig3 =
+            {
+                "x": "rpm",
+                "charts": [
+                    {
+                        "type": "bar",
+                        "y": "torque",
+                        "color": "EngineType",
+                        "colorDomain": [
+                            "",
+                            "",
+                            "piston"
+                            ]
+                    }
+                ],
+                "maxLength": 7,
+                "legend": true,
+            };
+
+        this.ChartConfig4 =
+            {
+                "x": "rpm",
+                "charts": [
+                    {
+                        "type": "line",
+                        "y": "torque",
+                        "color": "EngineType",
+                        "colorDomain": [
+                            "",
+                            "",
+                            "piston"
+                        ]
+                    }
+                ],
+                "maxLength": 7,
+                "legend": true,
+            };
+
+        this.metadata3 = {
+            "names": [
+                "rpm",
+                "torque",
+                "horsepower",
+                "EngineType"
+            ],
+            "types": [
+                "linear",
+                "linear",
+                "linear",
+                "ordinal"
+            ]
+        };
+
+        this.timeData3 = [
+            [40,20, 10,'piston'],
+        ];
+
     }
 
     componentDidMount() {
-        this.interval_id = setInterval(() => {
-            this.setState({
-                data: [
-                    [this.state.timer, this.state.timer === 20 ? null : Math.random() * 100, 10, 'piston'],
-                    [this.state.timer, Math.random() * 100, 10, 'rotary'],
-                ],
-                data2: [
-                    [this.state.timer, Math.random() * 100, Math.random() * 100, 'rotary'],
-                ],
-                timer: this.state.timer + 1,
-            });
-        }, 500);
+        // this.interval_id = setInterval(() => {
+        //     this.setState({
+        //         data: [
+        //             [this.state.timer, this.state.timer === 20 ? null : Math.random() * 100, 10, 'piston'],
+        //             [this.state.timer, Math.random() * 100, 10, 'rotary'],
+        //         ],
+        //         data2: [
+        //             [this.state.timer, Math.random() * 100, Math.random() * 100, 'rotary'],
+        //         ],
+        //         timer: this.state.timer + 1,
+        //     });
+        // }, 500);
     }
 
     componentWillUnmount() {
@@ -378,6 +519,16 @@
                                 </ul>
                             </div>
                         </ChartWrapper>
+
+                        <VizG config={this.ChartConfig} metadata={this.metadata2} data={this.timeData} />
+
+                        <VizG config={this.ChartConfig3} metadata={this.metadata3} data={this.timeData3} />
+
+                        <VizG config={this.ChartConfig4} metadata={this.metadata3} data={this.timeData3} />
+                        <VizG config={this.ordinalDataChart2} metadata={this.ordinalMetadata2} data={this.timeData2} />
+
+                        <VizG config={this.ordinalDataChart2} metadata={this.ordinalMetadata2} data={this.timeData13} />
+
                     </Grid>
 
                 </Grid>
